Index: src/presentationLayer/containers/catalog/my/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState, useEffect} from 'react';\nimport {connect, useSelector} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {\n    Typography, IconButton, TextField,\n    Button, Dialog, DialogTitle,\n    DialogContentText, DialogContent,\n    DialogActions, Tooltip\n} from '@material-ui/core';\n\nimport { AddBoxOutlined, SearchOutlined} from '@material-ui/icons';\nimport * as branchActions from '../../../../redux/branch/actions';\nimport * as myCatalogActions from '../../../../redux/myCatalog/actions';\nimport * as myCatalogSelectors from '../../../../redux/myCatalog/selectors';\nimport * as productActions from '../../../../redux/product/actions';\nimport { makeLoadingSelect } from '../../../../redux/common/selector';\nimport styles from './MyCatalog.module.scss';\nimport cn from 'classnames';\nimport TreeView from \"../../catalogTree/treeView\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CategoryAddEditDialog from \"../components/CategoryAddEditDialog\";\nimport { Switch, Route } from 'react-router-dom';\nimport ProductList from \"./productList\";\nimport Logic from '../../../../businessLayer';\nimport FileDownload from \"js-file-download\";\nimport withNotification from \"../../../hocs/withNotification/WithNotification\";\nimport { CloudUpload, CloudDownload, Sync } from '@material-ui/icons';\nimport { makeSelectBranchList } from \"../../../../redux/branch/selectors\";\nimport SelectBox from \"#components/spselect\";\nimport { transferCatalog } from \"../../../../redux/single/actions\";\nimport { useTranslation } from \"react-i18next\";\nimport {fetchBranchList} from \"../../branches/list/actions\";\n\nconst MyCatalog = props => {\n\n    const [addGroupDialog, setAddGroupDialog] = useState(false);\n    const [addGroupParent, setAddGroupParent] = useState(-1);\n    const [categoryName, setCategoryName] = useState('');\n    const [deleteDialog, setDeleteDialog] = useState(false);\n    const [deletingCategory, setDeletingCategory] = useState();\n    const [searchKeyword, setSearchKeyword] = useState('');\n    const [currentCategory, setCurrentCategory] = useState();\n    const [categoryDialogOpen, setCategoryDialogOpen] = useState(false);\n    const [uploadCategoryId, setUploadCategoryId] = useState(false);\n    const [transferDialog, setTransferDialog] = useState();\n    const [transferToCatalogId, setTransferToCatalogId] = useState();\n    const [showAdd, setShowAdd] = useState(false);\n    const currentBranch = useSelector(state => state.get('dashboard').currentBranch);\n\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        props.dispatch(myCatalogActions.fetchMyCatalog(currentBranch));\n        setShowAdd(!!currentBranch);\n    }, [currentBranch]);\n\n    useEffect(() => {\n        if (props.node) {\n            props.history.push(`/main/catalog/my?categoryId=${props.node.id}`)\n        }\n    }, [props.node]);\n\n    useEffect(() => {\n        props.dispatch(fetchBranchList({page: 0, size: 10000}));\n        props.history.push('/main/catalog/my');\n        props.dispatch(fetchBranchList({page: 0, size: 1000000}));\n        props.dispatch(productActions.clearProductList());\n        props.dispatch(myCatalogActions.fetchMyCatalog(currentBranch))\n    }, []);\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.filter}>\n                <Typography variant='h4' style={{color: '#555', fontSize: 18, fontWeight: 'bold', marginTop: 15,marginBottom:15}}>{t(\"myCatalog.title\")}</Typography>\n                { currentBranch && (\n                    <div className={styles.uploads}>\n                        <Tooltip title={t(\"myCatalog.sync\")}>\n                            <IconButton\n                                color=\"primary\"\n                                onClick={() => {\n                                    setTransferDialog(true)\n                                }}\n                            >\n                                <Sync/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title={t(\"myCatalog.upload_template\")}>\n                            <IconButton\n                                color=\"primary\" style={{marginRight: 15}}\n                                onClick={() => {\n                                    let e = document.getElementById('file');\n                                    e.click();\n                                    setUploadCategoryId(undefined)\n                                }}\n                            >\n                                <CloudUpload/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title={t(\"myCatalog.download_template\")}>\n                            <IconButton color=\"primary\" style={{marginRight: 10}}\n                                onClick={() => {\n                                    Logic\n                                        .myCatalog\n                                        .downloadTemplate({ branchId: currentBranch })\n                                        .then(response => {\n                                            FileDownload(response.data, 'product_list_template.xlsx');\n                                        })\n                                        .catch(console.log);\n                                }}\n                            >\n                                <CloudDownload/>\n                            </IconButton>\n                        </Tooltip>\n\n                    </div>\n                )}\n            </div>\n            <input id=\"file\" type=\"file\" accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" onChange={(e) => {\n                Logic\n                    .product\n                    .importProducts(e.target.files[0], {categoryId: uploadCategoryId, branchId: currentBranch})\n                    .then(response => {\n                        props.success('Успех!');\n                        if (currentBranch) {\n                            props.dispatch(myCatalogActions.fetchMyCatalog(currentBranch));\n                            if (uploadCategoryId !== undefined)\n                                props.history.push(`/main/catalog/my?categoryId=${uploadCategoryId}`)\n                        }\n                        setUploadCategoryId(undefined);\n                    })\n                    .catch(error => {\n                        props.error(error.toString());\n                        setUploadCategoryId(undefined);\n                    });\n            }} style={{display: 'none'}}/>\n            <Dialog\n                onClose={() => {\n                    setTransferDialog(false);\n                    setTransferToCatalogId(undefined);\n                }}\n                fullWidth\n                open={transferDialog}\n            >\n                <DialogTitle>{t(\"myCatalog.sync_catalog\")}</DialogTitle>\n                <DialogContentText>\n                    <div style={{padding: 20}}>\n                        <Typography variant='h4' style={{padding: 20, fontSize: 17, color: '#555'}}>\n                            {t(\"myCatalog.choose_sync_branch\")}\n                        </Typography>\n                        <div style={{marginTop: 20}}>\n                            <SelectBox\n                                label={t(\"common.branch\")}\n                                labelWidth={70}\n                                itemKey='id'\n                                itemValue='name'\n                                data={props.branchList ? props.branchList.filter(b => b.id !== currentBranch) : []}\n                                value={transferToCatalogId}\n                                onChange={event => {\n                                    setTransferToCatalogId(event.target.value)\n                                }}\n                            />\n                        </div>\n                    </div>\n                </DialogContentText>\n                <DialogActions>\n                    <Button color='primary' onClick={() => {\n                        props.dispatch(transferCatalog(currentBranch, transferToCatalogId, props));\n                        setTransferDialog(false);\n                        setTransferToCatalogId(undefined);\n                    }}>{t(\"common.yes\")}</Button>\n                    <Button color='primary' onClick={() => {\n                        setTransferDialog(false);\n                        setTransferToCatalogId(undefined);\n                    }}>{t(\"common.no\")}</Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                onClose={() => {\n                    setDeleteDialog(false);\n                    setDeletingCategory(undefined);\n                }}\n                fullWidth\n                open={deleteDialog}\n            >\n                <DialogTitle>{t(\"myCatalog.delete_category_title\")}</DialogTitle>\n                <DialogContentText>\n                    <Typography variant='h4' style={{padding: 20, fontSize: 17, color: '#555'}}>\n                        {t(\"myCatalog.delete_category_text\")}\n                    </Typography>\n                </DialogContentText>\n                <DialogActions>\n                    <Button color='primary' onClick={() => {\n                        props.dispatch(myCatalogActions.removeCategory(deletingCategory, currentBranch, props));\n                        setDeleteDialog(false);\n                        setDeletingCategory(undefined);\n                    }}>{t(\"common.yes\")}</Button>\n                    <Button color='primary' onClick={() => {\n                        setDeleteDialog(false);\n                        setDeletingCategory(undefined);\n                    }}>{t(\"common.no\")}</Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={addGroupDialog}\n                onClose={() => {\n                    setAddGroupParent(-1);\n                    setAddGroupDialog(false);\n                    setCategoryName('');\n                }}\n                fullWidth\n            >\n                <DialogTitle>{t(\"myCatalog.add_category\")}</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        fullWidth\n                        value={categoryName}\n                        onChange={event => {\n                            setCategoryName(event.target.value);\n                        }}/>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant='text' color='primary' onClick={() => {\n                        setAddGroupDialog(false);\n                    }}>{t(\"common.no\")}</Button>\n                    <Button variant='text' color='primary' onClick={() => {\n\n                        props.dispatch(myCatalogActions.addCategory({\n                            parentId: addGroupParent,\n                            name: categoryName,\n                            enabled: true\n                        }, currentBranch));\n                        setAddGroupDialog(false);\n                        setAddGroupParent(-1);\n                        setCategoryName('');\n                    }}>{t(\"common.add\")}</Button>\n                </DialogActions>\n            </Dialog>\n\n\n            <CategoryAddEditDialog\n                open={categoryDialogOpen}\n                onAddCategory={category => {\n                    if (currentCategory) {\n                        props.dispatch(myCatalogActions.updateCategory(category, currentBranch));\n                    } else {\n                        props.dispatch(myCatalogActions.addCategory(category, currentBranch));\n                    }\n                    setCurrentCategory(undefined);\n                    setCategoryDialogOpen(false);\n                }}\n                onCancel={() => {\n                    setCurrentCategory(undefined);\n                    setCategoryDialogOpen(false);\n                }}\n                current={currentCategory}\n            />\n\n            <Paper className={styles.container}>\n                <div className={styles.tree}>\n                    <div className={cn(styles.header)}>\n                        <div className={cn(styles.textfield)}>\n                            <TextField\n                                placeholder={t(\"myCatalog.search_by_category\")}\n                                fullWidth\n                                onChange={event => {\n                                    setSearchKeyword(event.target.value);\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <Tooltip title={t(\"myCatalog.search_by_category_tooltip\")}>\n                                <IconButton color='primary'>\n                                    <SearchOutlined style={{fontSize: 35}}/>\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n                        <Tooltip title={t(\"myCatalog.add_category\")}>\n                            <IconButton\n                                color='primary'\n                                onClick={() => {\n                                    setCategoryDialogOpen(true);\n                                }}\n                                style={{display: showAdd ? 'block' : 'none'}}\n                            >\n                                <AddBoxOutlined style={{fontSize: 35}}/>\n                            </IconButton>\n                        </Tooltip>\n\n                    </div>\n\n\n                    <div className={styles.tree_content}>\n                        <TreeView\n                            data={props.myCatalog}\n                            keyword={searchKeyword}\n                            itemClickable\n                            onItemClicked={node => {\n                                props.dispatch(myCatalogActions.setCategory(node));\n                            }}\n                            isLoading={props.isLoading}\n                            showProductCount\n                            options={ currentBranch && [\n                                t(\"myCatalog.add_group\"),\n                                t(\"myCatalog.add_product\"),\n                                t(\"common.delete\"),\n                                t(\"myCatalog.download_template\"),\n                                t(\"myCatalog.upload_template\")\n                             ]}\n                            onOperationClick={({index, item}) => {\n                                switch (index) {\n                                    case 0:\n                                        setAddGroupParent(item.id);\n                                        setAddGroupDialog(true);\n                                        break;\n                                    case 1:\n                                        props.dispatch(myCatalogActions.setSelectedCategory(item.id));\n                                        break;\n                                    case 2:\n                                        setDeleteDialog(true);\n                                        setDeletingCategory(item);\n                                        break;\n                                    case 3:\n                                        Logic\n                                            .myCatalog\n                                            .downloadTemplate({categoryId: item.id})\n                                            .then(response => {\n                                                FileDownload(response.data, 'product_list_template.xlsx');\n                                            })\n                                            .catch(console.log);\n                                        break;\n                                    case 4:\n                                        let e = document.getElementById('file');\n                                        e.click();\n                                        setUploadCategoryId(item.id);\n                                        break;\n                                    default:\n                                        break\n                                }\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className={cn(styles.col, styles.lp_20)}>\n                    <Switch>\n                        <Route path=\"/main/catalog/my\" component={ProductList} />\n                    </Switch>\n                </div>\n            </Paper>\n        </div>\n    )\n};\n\nexport default connect(state => ({\n    myCatalog: myCatalogSelectors.makeSelectMyCatalog(state),\n    isLoading: makeLoadingSelect(state),\n    node: myCatalogSelectors.makeSelectMyCatalogCategory(state),\n    branchList: state.get(\"branch\").list\n}))(withNotification(withRouter(MyCatalog)));\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/presentationLayer/containers/catalog/my/index.js	(revision ad5d752a01baf4ad7d83a5853b311b624f7add7f)
+++ src/presentationLayer/containers/catalog/my/index.js	(date 1605529738260)
@@ -25,7 +25,6 @@
 import FileDownload from "js-file-download";
 import withNotification from "../../../hocs/withNotification/WithNotification";
 import { CloudUpload, CloudDownload, Sync } from '@material-ui/icons';
-import { makeSelectBranchList } from "../../../../redux/branch/selectors";
 import SelectBox from "#components/spselect";
 import { transferCatalog } from "../../../../redux/single/actions";
 import { useTranslation } from "react-i18next";
